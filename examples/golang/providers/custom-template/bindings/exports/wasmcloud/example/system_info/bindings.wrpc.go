// Generated by `wit-bindgen-wrpc-go` 0.1.0. DO NOT EDIT!
package system_info

import (
	bytes "bytes"
	context "context"
	binary "encoding/binary"
	fmt "fmt"
	wrpc "github.com/wrpc/wrpc/go"
	slog "log/slog"
	math "math"
)

type Kind uint8

const (
	Kind_Os   Kind = 0
	Kind_Arch Kind = 1
)

func (v Kind) String() string {
	switch v {
	case Kind_Os:
		return "OS"
	case Kind_Arch:
		return "ARCH"
	default:
		panic("invalid enum")
	}
}
func (v Kind) WriteTo(w wrpc.ByteWriter) error {
	if err := func(v uint8, w wrpc.ByteWriter) error {
		slog.Debug("writing u8 byte")
		return w.WriteByte(v)
	}(uint8(v), w); err != nil {
		return fmt.Errorf("failed to write discriminant: %w", err)
	}
	return nil
}
func ReadKind(r wrpc.ByteReader) (v Kind, err error) {
	disc, err := func(r wrpc.ByteReader) (uint8, error) {
		slog.Debug("reading `u8` byte")
		v, err := r.ReadByte()
		if err != nil {
			return 0, fmt.Errorf("failed to read `u8` byte: %w", err)
		}
		return v, nil
	}(r)
	if err != nil {
		return v, fmt.Errorf("failed to read discriminant: %w", err)
	}
	switch Kind(disc) {
	case Kind_Os:
		return Kind_Os, nil
	case Kind_Arch:
		return Kind_Arch, nil
	default:
		return v, fmt.Errorf("unknown discriminant value %d", disc)
	}
}

type Handler interface {
	// Request information about the system the provider is running on
	RequestInfo(ctx__ context.Context, kind Kind) (r0__ string, err__ error)

	// Example export to call from the provider for testing
	Call(ctx__ context.Context) (r0__ string, err__ error)
}

func ServeInterface(c wrpc.Client, h Handler) (stop func() error, err error) {
	stops := make([]func() error, 0, 2)
	stop = func() error {
		for _, stop := range stops {
			if err := stop(); err != nil {
				return err
			}
		}
		return nil
	}
	stop0, err := c.Serve("wasmcloud:example/system-info", "request-info", func(ctx context.Context, buffer []byte, tx wrpc.Transmitter, inv wrpc.IncomingInvocation) error {
		slog.DebugContext(ctx, "subscribing for `wasmcloud:example/system-info.request-info` parameters")

		payload := make(chan []byte)
		stop, err := inv.Subscribe(func(ctx context.Context, buf []byte) {
			payload <- buf
		})
		if err != nil {
			return err
		}
		defer func() {
			if err := stop(); err != nil {
				slog.ErrorContext(ctx, "failed to stop parameter subscription", "err", err)
			}
		}()

		// TODO: Handle async parameters

		slog.DebugContext(ctx, "accepting handshake")
		if err := inv.Accept(ctx, nil); err != nil {
			return fmt.Errorf("failed to complete handshake: %w", err)
		}
		r := wrpc.NewChanReader(ctx, payload, buffer)
		slog.DebugContext(ctx, "reading parameter", "i", 0)
		p0, err := ReadKind(r)
		if err != nil {
			return fmt.Errorf("failed to read parameter 0")
		}
		slog.DebugContext(ctx, "calling `wasmcloud:example/system-info.request-info` handler")
		r0, err := h.RequestInfo(ctx, p0)
		if err != nil {
			return fmt.Errorf("failed to handle `wasmcloud:example/system-info.request-info` invocation: %w", err)
		}
		var buf bytes.Buffer
		if err := func(v string, w wrpc.ByteWriter) error {
			n := len(v)
			if n > math.MaxUint32 {
				return fmt.Errorf("string byte length of %d overflows a 32-bit integer", n)
			}
			slog.Debug("writing string byte length", "len", n)
			if err := func(v uint32, w wrpc.ByteWriter) error {
				b := make([]byte, binary.MaxVarintLen32)
				i := binary.PutUvarint(b, uint64(v))
				slog.Debug("writing u32")
				_, err := w.Write(b[:i])
				return err
			}(uint32(n), w); err != nil {
				return fmt.Errorf("failed to write string length of %d: %w", n, err)
			}
			slog.Debug("writing string bytes")
			_, err := w.Write([]byte(v))
			if err != nil {
				return fmt.Errorf("failed to write string bytes: %w", err)
			}
			return nil
		}(r0, &buf); err != nil {
			return fmt.Errorf("failed to write result value 0: %w", err)
		}
		slog.DebugContext(ctx, "transmitting `wasmcloud:example/system-info.request-info` result")
		if err := tx.Transmit(context.Background(), buf.Bytes()); err != nil {
			return fmt.Errorf("failed to transmit result: %w", err)
		}
		return nil
	})
	if err != nil {
		return nil, fmt.Errorf("failed to serve `wasmcloud:example/system-info.request-info`: %w", err)
	}
	stops = append(stops, stop0)
	stop1, err := c.Serve("wasmcloud:example/system-info", "call", func(ctx context.Context, buffer []byte, tx wrpc.Transmitter, inv wrpc.IncomingInvocation) error {
		slog.DebugContext(ctx, "subscribing for `wasmcloud:example/system-info.call` parameters")

		payload := make(chan []byte)
		stop, err := inv.Subscribe(func(ctx context.Context, buf []byte) {
			payload <- buf
		})
		if err != nil {
			return err
		}
		defer func() {
			if err := stop(); err != nil {
				slog.ErrorContext(ctx, "failed to stop parameter subscription", "err", err)
			}
		}()

		// TODO: Handle async parameters

		slog.DebugContext(ctx, "accepting handshake")
		if err := inv.Accept(ctx, nil); err != nil {
			return fmt.Errorf("failed to complete handshake: %w", err)
		}
		slog.DebugContext(ctx, "calling `wasmcloud:example/system-info.call` handler")
		r0, err := h.Call(ctx)
		if err != nil {
			return fmt.Errorf("failed to handle `wasmcloud:example/system-info.call` invocation: %w", err)
		}
		var buf bytes.Buffer
		if err := func(v string, w wrpc.ByteWriter) error {
			n := len(v)
			if n > math.MaxUint32 {
				return fmt.Errorf("string byte length of %d overflows a 32-bit integer", n)
			}
			slog.Debug("writing string byte length", "len", n)
			if err := func(v uint32, w wrpc.ByteWriter) error {
				b := make([]byte, binary.MaxVarintLen32)
				i := binary.PutUvarint(b, uint64(v))
				slog.Debug("writing u32")
				_, err := w.Write(b[:i])
				return err
			}(uint32(n), w); err != nil {
				return fmt.Errorf("failed to write string length of %d: %w", n, err)
			}
			slog.Debug("writing string bytes")
			_, err := w.Write([]byte(v))
			if err != nil {
				return fmt.Errorf("failed to write string bytes: %w", err)
			}
			return nil
		}(r0, &buf); err != nil {
			return fmt.Errorf("failed to write result value 0: %w", err)
		}
		slog.DebugContext(ctx, "transmitting `wasmcloud:example/system-info.call` result")
		if err := tx.Transmit(context.Background(), buf.Bytes()); err != nil {
			return fmt.Errorf("failed to transmit result: %w", err)
		}
		return nil
	})
	if err != nil {
		return nil, fmt.Errorf("failed to serve `wasmcloud:example/system-info.call`: %w", err)
	}
	stops = append(stops, stop1)
	return stop, nil
}
